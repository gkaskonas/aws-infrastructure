AWSTemplateFormatVersion: "2010-09-09"
Description: Creating VPC Network infrastrcture
Parameters:
  EnvironmentName:
    Description: Environment Name
    Type: String
    Default: "AWS Services"

  VpcCIDR:
    Description: Please Enter IP address for VPC (CIDR Notation)
    Type: String
    Default: 10.1.0.0/16

  PublicSubnet1CIDR:
    Description: Please Enter VPC Public Subnet for VPC ( CIDR Notation)
    Type: String
    Default: 10.1.1.0/24

  PublicSubnet2CIDR:
    Description: Please Enter VPC Public Subnet for VPC ( CIDR Notation)
    Type: String
    Default: 10.1.2.0/24 

  PrivateSubnet1CIDR:
    Description: Please Enter VPC Private Subnet for VPC ( CIDR Notation)
    Type: String
    Default: 10.1.3.0/24

  PrivateSubnet2CIDR:
    Description: Please Enter VPC Private Subnet for VPC ( CIDR Notation)
    Type: String
    Default: 10.1.4.0/24
  KeyPairName:
    Type: String
    Default: service-acc-keypair
  NatInstanceType:
    Type: String
    Default: ami-01ae0e01e7fffd105
  NatAMI:
    Type: AWS::EC2::Image::Id
    Default: ami-01ae0e01e7fffd105

#Creating VPC
Resources:
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VpcCIDR
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: !Ref EnvironmentName

  #Creating Private and Public subnets
  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [0, !GetAZs ""]
      CidrBlock: !Ref PublicSubnet1CIDR
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} Pubic Subnet  (AZ1)

  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [1, !GetAZs ""]
      CidrBlock: !Ref PublicSubnet2CIDR
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} Pubic Subnet  (AZ2)

  PrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [0, !GetAZs ""]
      CidrBlock: !Ref PrivateSubnet1CIDR
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} Private Subnet (AZ1)

  PrivateSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [1, !GetAZs ""]
      CidrBlock: !Ref PrivateSubnet2CIDR
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} Private Subnet (AZ2)

  #InternetGateway Creation and attaching it to VPC

  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: !Ref EnvironmentName

  InternetGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref InternetGateway
      VpcId: !Ref VPC

  # Nat Instance

  NatEip:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc
      InstanceId: !Ref NatInstance

  NatInstance:
    Type: AWS::EC2::Instance
    Properties:
      InstanceType: !Ref NatInstanceType
      KeyName: !Ref KeyPairName
      IamInstanceProfile: !Ref NatRoleProfile
      SourceDestCheck: false
      ImageId: !Ref NatAMI
      NetworkInterfaces:
        - GroupSet:
            - !Ref 'NatSecurityGroup'
          AssociatePublicIpAddress: true
          DeviceIndex: "0"
          DeleteOnTermination: true
          SubnetId: !Ref PublicSubnet1
      Tags:
        - Key: Name
          Value: NAT AZ1
        - Key: Schedule
          Value: uk-office-hours
      UserData: !Base64
        Fn::Join:
          - ''
          - - "#!/bin/bash \n"
            - "yum update -y \n"
            -  "yum install -y https://s3.amazonaws.com/ec2-downloads-windows/SSMAgent/latest/linux_amd64/amazon-ssm-agent.rpm\n"
            -  "systemctl enable amazon-ssm-agent\n"
            -  "systemctl start amazon-ssm-agent\n"
  NatRole:
    Type: AWS::IAM::Role
    Properties:
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: /
      Policies:
        - PolicyName: NAT_Takeover
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action:
                  - ec2:DescribeInstances
                  - ec2:DescribeRouteTables
                  - ec2:CreateRoute
                  - ec2:ReplaceRoute
                  - ec2:StartInstances
                  - ec2:StopInstances
                  - ec2:DescribeNetworkInterfaces
                  - ec2:DescribeAddresses
                  - ec2:AllocateAddress
                  - ec2:AssociateAddress
                  - ec2:DisassociateAddress
                Resource: '*'
  NatRoleProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: /
      Roles:
        - !Ref 'NatRole'
  NatSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for allowing access in/out of VPC
      VpcId: !Ref 'VPC'
      Tags:
        - Key: Name
          Value: VPC NAT Instance Security Group
        - Key: Environment
          Value: !Ref 'EnvironmentName'
  NatSGEgressGlobalHttp:
    Type: AWS::EC2::SecurityGroupEgress
    Properties:
      GroupId: !Ref 'NatSecurityGroup'
      IpProtocol: tcp
      FromPort: 80
      ToPort: 80
      CidrIp: '0.0.0.0/0'
  NatSGEgressGlobalHttps:
    Type: AWS::EC2::SecurityGroupEgress
    Properties:
      GroupId: !Ref 'NatSecurityGroup'
      IpProtocol: tcp
      FromPort: 443
      ToPort: 443
      CidrIp: '0.0.0.0/0'
  NatSGEgressGlobalIcmp:
    Type: AWS::EC2::SecurityGroupEgress
    Properties:
      GroupId: !Ref 'NatSecurityGroup'
      IpProtocol: icmp
      FromPort: -1
      ToPort: -1
      CidrIp: '0.0.0.0/0'
  NatSGIngressIcmp:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !Ref 'NatSecurityGroup'
      IpProtocol: icmp
      FromPort: -1
      ToPort: -1
      SourceSecurityGroupId: !Ref 'NatSecurityGroup'
  NatSGEgressSsh:
    Type: AWS::EC2::SecurityGroupEgress
    Properties:
      GroupId: !Ref 'NatSecurityGroup'
      IpProtocol: tcp
      FromPort: 22
      ToPort: 22
      CidrIp: !Ref 'VpcCIDR'
  NatSGIngressSsh:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !Ref 'NatSecurityGroup'
      IpProtocol: tcp
      FromPort: 22
      ToPort: 22
      CidrIp: !Ref 'VpcCIDR'
  NatSGIngressHttp:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !Ref 'NatSecurityGroup'
      IpProtocol: tcp
      FromPort: 80
      ToPort: 80
      CidrIp: !Ref 'VpcCIDR'
  NatSGIngressHttps:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !Ref 'NatSecurityGroup'
      IpProtocol: tcp
      FromPort: 443
      ToPort: 443
      CidrIp: !Ref 'VpcCIDR'
  #Routing Tables

  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} Public Routes

  DefaultPublicRoute:
    Type: AWS::EC2::Route
    DependsOn: InternetGatewayAttachment
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  #Assosiating Routing table with Subnet
  PublicSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet1

  PublicSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet2

  PrivateRouteTable1:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} Private Routes

  DefaultPrivateRoute1:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTable1
      DestinationCidrBlock: 0.0.0.0/0
      InstanceId: !Ref NatInstance

  PrivateSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTable1
      SubnetId: !Ref PrivateSubnet1

  PrivateSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTable1
      SubnetId: !Ref PrivateSubnet2
